#!/usr/bin/env bash

mkcd() {
  mkdir -pv $1 && cd $1
}

fdNvimRtp() {
	local search_term="${1:-.}"
	nvim -e -s -c "set runtimepath?" \
		| sed s/runtimepath=// | tr "," $IFS | awk '{$1=$1};1' \
		| xargs fd $search_term --max-depth=1 2>/dev/null
}


# TODO: rewrite in dash-compatible way
nvmuse() {
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
	nvm use $@
	SetWebCerts
}

SdkManInit() {
	export SDKMAN_DIR="$HOME/.sdkman"
	[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
}

RBInit() {
	eval "$(rbenv init - zsh)"
}

SetWebCerts() {
	export NODE_EXTRA_CA_CERTS="/tmp/mega.pem"
	if [ ! -f $NODE_EXTRA_CA_CERTS ]; then
		security find-certificate -a -p /Library/Keychains/System.keychain > $NODE_EXTRA_CA_CERTS
	fi
}

#tea-magic() {
#	[[ -d "$HOME/.tea" ]] && source <("$HOME/.tea/tea.xyz/v*/bin/tea" --magic)
#}

[[ -r ~/dotfiles/bin/clone ]] && source ~/dotfiles/bin/clone

[[ -r ~/dotfiles/wmt.sh ]] && source ~/dotfiles/wmt.sh

function afk() {
  echo "set i to 0
  repeat while i < 20
  tell application \"System Events\" to key code 80
  set i to i + 1
  delay 180
end repeat" | osascript
}

function vo() {
	vim $(fd | fzf)
}

function trash() {
	(
	set -o errexit
	set -o nounset
	set -o pipefail
	set -o xtrace

	for file in $@; do
		mv $file ~/.local/share/Trash/files/
		cat <<EOF > ~/.local/share/Trash/info/$(basename $file).trashinfo
[Trash Info]
Path=$(realpath $file)
DeletionDate=$(date +%Y-%m-%dT%H:%M:%S)
EOF
	done
)
}

function keepkillwd() {
## Microsoft antivirus runs every time we write to the filesystem.  This makes
# write-heavy processes a lot slower.  This function keeps the antivirus
# software contained to speed up disk writes
#
# While running this function, I've measured `git switch` to be 2x faster and
# web production builds to be 20% faster
#
# Run this function in a separate terminal window like
# `sudo zsh -c "source $HOME/.sh_functions; keepkillwd"`
# to prevent being prompted when waking the machine from sleep
  local nextSleep=1;
  # use sudo here so that we're not prompted in the loop
  sudo echo "started successfully"
  while true; do
	  sudo killall -9 wdavdaemon wdavdaemon_unprivileged wdavdaemon_enterprise
	  local laststatus=$?
	  local killed_something=0
	  if [[ $laststatus != 1 ]]; then
		  killed_something=1
	  fi
	  sudo pkill -9 -f /Library/infp/extension/python/app/Python-3.10.6/python.exe
	  local laststatus=$?
	  if [[ $laststatus != 1 ]]; then
		  killed_something=1
	  fi

	  if [[ $killed_something == 1 ]]; then
		  nextSleep=1
	  else
		  nextSleep=$(($nextSleep + 1))
	  fi
	  sleep $nextSleep
  done
}

kubeparallel() {
	local clusters=(scus-prod-a29 eus2-prod-a18 uswest-prod-az-002)
	local clusters_separated_by_newlines_extra_newline=$(printf "\n%s" "${clusters[@]}") # \nscus-prod-a29\neus2-prod-a18\nuswest-prod-az-002
	local clusters_separated_by_newlines=${clusters_separated_by_newlines_extra_newline:1} # scus-prod-a29\neus2-prod-a18\nuswest-prod-az-002
	printf "$clusters_separated_by_newlines" | parallel -j3 "printf '\e[34m\e[40m{}\e[0m\n'; kubectl $@ --context={} ; printf '\n'"
}

kubesequential() {
	local clusters=("scus-prod-a29" "eus2-prod-a18" "uswest-prod-az-002")
	local clusters_separated_by_newlines_extra_newline=$(printf "\n%s" "${clusters[@]}") # \nscus-prod-a29\neus2-prod-a18\nuswest-prod-az-002
	local clusters_separated_by_newlines=${clusters_separated_by_newlines_extra_newline:1} # scus-prod-a29\neus2-prod-a18\nuswest-prod-az-002
	printf "$clusters_separated_by_newlines" | xargs -r -I{} zsh -c "echo '\e[34m\e[40m{}\e[0m' ; kubectl $* --context={} ; printf '\n'"
}
