#!/usr/bin/env sh

mkcd() {
  mkdir -pv $1 && cd $1
}


# TODO: rewrite in dash-compatible way
nvmuse() {
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
	nvm use $@
	SetWebCerts
}

SdkManInit() {
	export SDKMAN_DIR="$HOME/.sdkman"
	[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
}

RBInit() {
	eval "$(rbenv init - zsh)"
}

SetWebCerts() {
	export NODE_EXTRA_CA_CERTS="/tmp/mega.pem"
	if [ ! -f $NODE_EXTRA_CA_CERTS ]; then
		security find-certificate -a -p /Library/Keychains/System.keychain > $NODE_EXTRA_CA_CERTS
	fi
}

#tea-magic() {
#	[[ -d "$HOME/.tea" ]] && source <("$HOME/.tea/tea.xyz/v*/bin/tea" --magic)
#}

source ~/dotfiles/bin/clone

function vpn-up() {
  #local VPN_HOST=sslvpngwgec.wal-mart.com/Walmart_Associate_MAC_Yubi # blocks Spotify
  #local VPN_HOST=http://sslvpngwwec.wal-mart.com/Walmart_Associate_Yubi # blocks Spotify
  #local VPN_HOST=http://sslvpngw.wal-mart.com/Walmart_Associate_Yubi # seamlessly switches on Zoom calls; blocks Spotify; makes Slack go offline when switching
  local VPN_HOST=sslvpngwwec.wal-mart.com/Walmart_Associate_Yubi # blocks Spotify, i like this one
  local VPN_USER=$(whoami) #for openconnect

  echo "Starting the vpn ..."
  local vpn_password="$(security find-generic-password -w -s 'wmt-sso' -a $VPN_USER)"
  local mfa_code="$(2fa walmart)"
  printf "\n${vpn_password}\n${mfa_code}\ny" | /opt/cisco/anyconnect/bin/vpn -s connect $VPN_HOST $@

  #echo "$(cat ~/.vpn_password)\n$(2fa walmart)" | sudo openconnect --passwd-on-stdin --user=$VPN_USER $VPN_HOST $@ # for openconnect
}

function vpn-down() {
  #sudo kill -2 `pgrep openconnect` # for openconncet
  /opt/cisco/anyconnect/bin/vpn disconnect
}

function vpn-status() {
    local vpn=/opt/cisco/anyconnect/bin/vpn
    if [[ ! -x $vpn ]]; then
	echo "N/A"
	return 1
    fi

    /opt/cisco/anyconnect/bin/vpn state\
	| sed -r 's/^.*state: (Connected|Disconnected)$/\1/g'\
	| grep -E --color=never 'Connected|Disconnected'\
	| head -n1
}

function sudome() {
  set -x
  sudo jamf policy -id 854
  set +x
}

function afk() {
  echo "set i to 0
  repeat while i < 20
  tell application \"System Events\" to key code 80
  set i to i + 1
  delay 180
end repeat" | osascript
}

function vo() {
	vim $(fd | fzf)
}

function keepkillwd() {
  local nextSleep=1;
  while true; do
	  sudo killall -9 wdavdaemon wdavdaemon_unprivileged wdavdaemon_enterprise 2>/dev/null && nextSleep=1 || nextSleep=$(($nextSleep + 1))
	  sleep $nextSleep
  done
}

kubeparallel() {
	local clusters=(scus-prod-a29 eus2-prod-a18 uswest-prod-az-002)
	local clusters_separated_by_newlines_extra_newline=$(printf "\n%s" "${clusters[@]}") # \nscus-prod-a29\neus2-prod-a18\nuswest-prod-az-002
	local clusters_separated_by_newlines=${clusters_separated_by_newlines_extra_newline:1} # scus-prod-a29\neus2-prod-a18\nuswest-prod-az-002
	printf "$clusters_separated_by_newlines" | parallel -j3 "printf '\e[34m\e[40m{}\e[0m\n'; kubectl $@ --context={} ; printf '\n'"
}

kubesequential() {
	local clusters=("scus-prod-a29" "eus2-prod-a18" "uswest-prod-az-002")
	local clusters_separated_by_newlines_extra_newline=$(printf "\n%s" "${clusters[@]}") # \nscus-prod-a29\neus2-prod-a18\nuswest-prod-az-002
	local clusters_separated_by_newlines=${clusters_separated_by_newlines_extra_newline:1} # scus-prod-a29\neus2-prod-a18\nuswest-prod-az-002
	printf "$clusters_separated_by_newlines" | xargs -r -I{} zsh -c "echo '\e[34m\e[40m{}\e[0m' ; kubectl $* --context={} ; printf '\n'"
}
