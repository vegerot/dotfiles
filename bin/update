#!/usr/bin/env bash
set -o errexit
set -o nounset
set -o pipefail
set -o xtrace

function upgrade_brew() {
	echo "brew"
	brew outdated||\
		brew update&&\
		# TODO: don't ask to `brew upgrade` if there are no outdated packages
			read -p 'Would you like to upgrade Brew (y/n): ' upgradeBrew
			if [[ "$upgradeBrew" == "y" ]]; then
				brew upgrade
				echo "brew upgrade --cask"
				brew upgrade --cask
			fi
}

function upgrade_apt() {
	echo "apt update"
	sudo apt update
	echo "apt list --upgradable"
	apt list --upgradable

	read -p 'Would you like to upgrade APT (y/n): ' upgradeApt
	if [[ "$upgradeApt" == "y" ]]; then
		sudo apt upgrade
	fi
}

function upgrade_zsh() {
	echo "zsh plugins"
	read -p 'Would you like to upgrade zsh plugins (y/n): ' upgradeZsh
	if [[ "$upgradeZsh" == "y" ]] && type zsh 2>/dev/null ; then
		ZSH_SKIP_LOADING_PLUGINS=1 zsh -lic "
		set -o errexit
		set -o nounset
		set -o pipefail
		set -o xtrace
		type update_plugins >/dev/null 2>&1 && update_plugins
		set +x"
	fi
}

function upgrade_neovim() {
	echo "neovim"

	function pull_and_update() {
		set -o errexit
		set -o nounset
		set -o pipefail
		dir=$1
		if [[ -d "$dir/.git" ]]; then
			(cd "$dir" && git pull)
		elif [[ -d "$dir/.sl" ]]; then
			(cd "$dir" && sl pull && sl top --newest)
		fi
	}

	read -p 'Would you like to upgrade Neovim plugins (y/n): ' upgradeNvim
	if [[ "$upgradeNvim" == "y" ]]; then
		fd . --type d --max-depth 1 --full-path ~/.local/share/nvim/site/pack/*/start/ --exec zsh -c "($(declare -f pull_and_update) && pull_and_update {})";
	fi
}


function upgrade_npm() {
	read -p 'Would you like to upgrade Node (y/n): ' upgradeNode
	if [[ "$upgradeNode" == "y" ]]; then
		npm outdated
		echo "npm update --global"
		if [[ $OSTYPE != "darwin"* ]]; then
			sudo npm install npm --global --force
			sudo npm update --global
		else
			npm install npm --global --force
			npm update --global
		fi
	fi
}

function upgrade_app_store() {
	echo "App Store"
	# open "macappstore://showUpdatesPage"
	mas outdated
	# TODO: Don't ask to upgrade apps if nothing is outdated
	read -p 'Would you like to upgrade apps?  (y/n): ' upgradeApps
	if [[ "$upgradeApps" == "y" ]]; then
		mas upgrade
	fi
	echo
}

function upgrade_macos() {
	echo "macOS"
	softwareupdate --list
	# TODO: Don't ask to upgrade macOS if nothing is outdated
	read -p 'Would you like to upgrade macOS (y/n): ' upgradeMacOS
	if [[ "$upgradeMacOS" == "y" ]]; then
		softwareupdate --install --all --verbose
	fi
}

if [[ $OSTYPE == "darwin"* ]]; then
	upgrade_brew
else
	upgrade_apt
fi
upgrade_zsh
upgrade_neovim
upgrade_npm
if [[ $OSTYPE == "darwin"* ]]; then
	upgrade_app_store
	upgrade_macos
fi


set +o xtrace

